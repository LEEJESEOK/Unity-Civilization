using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using SimplePF2D; // The namespace used by SimplePathFinding2D

// Peter is an agent that follows a path generated by the players left mouse click
// This script is a brief example on how to access points on a Path object.
// Attach this component to a GameObject with a rigidbody and a sprite (so you can see it in action).
// Try messing with the various parameters of the CreatePath function.
public class Peter : MonoBehaviour
{
    public GameObject navGrid; // We can give this object a Grid object to begin path finding with.
    private Path path; 
    private Rigidbody2D rb;
    private Vector3 nextPoint;
    private float speed = 5.0f;
    private bool isStationary = true;
    public bool useDiagonal = false;

    // Start is called before the first frame update
    void Start()
    {
        // Create our new paths using the SimplePathFinding2D object attached to a Grid GameObject.
        if (navGrid == null)
        {
            path = new Path(GameObject.Find("Grid").GetComponent<SimplePathFinding2D>());
        }
        else
        {
            path = new Path(navGrid.GetComponent<SimplePathFinding2D>());
        }

        rb = GetComponent<Rigidbody2D>();
        nextPoint = Vector3.zero;
    }

    // Update is called once per frame
    void FixedUpdate()
    {
      
        if (Input.GetMouseButtonDown(0))
        {
            Vector3 mouseworldpos = Camera.main.ScreenToWorldPoint(Input.mousePosition);
            mouseworldpos.z = 0.0f;
            // Create a path from this gameobjects position to the click position. A variable specifies whether we want to use diagonals on this path.
            path.CreatePath(transform.position, mouseworldpos, useDiagonal);
        }

        // Check if the path has been generated yet. Path's may not be created instantaneously. Depending on the number
        // of concurrent paths, they may be completed over a series of frames.
        if (path.IsGenerated())
        {
            if (isStationary) // A boolean that informs us what state Peter is in. If he's not moving, he should get the next point in the path.
            {
                // Get the next point in the path as a world position. Returns true when this is successful.
                if (path.GetNextPoint(ref nextPoint))
                {
                    rb.velocity = nextPoint - transform.position;
                    rb.velocity = rb.velocity.normalized;
                    rb.velocity *= speed;
                    isStationary = false;
                }
                else // When GetNextPoint is fale it means we have reached the end of the path.
                {
                    rb.velocity = Vector3.zero;
                    isStationary = true;
                }
            }
            else
            {
                Vector3 delta = nextPoint - transform.position;
                if (delta.magnitude <= 0.2f)
                {
                    rb.velocity = Vector3.zero;
                    isStationary = true;
                }
            }
        }
        else
        {
            rb.velocity = Vector3.zero;
            isStationary = true;
        }

    }
}
